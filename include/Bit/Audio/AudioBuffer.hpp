// ///////////////////////////////////////////////////////////////////////////
// Copyright (C) 2013 Jimmie Bergmann - jimmiebergmann@gmail.com
//
// This software is provided 'as-is', without any express or
// implied warranty. In no event will the authors be held
// liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute
// it freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but
//    is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any
//    source distribution.
// ///////////////////////////////////////////////////////////////////////////

#ifndef BIT_AUDIO_AUDIO_BUFFER_HPP
#define BIT_AUDIO_AUDIO_BUFFER_HPP

#include <Bit/Build.hpp>
#include <string>

namespace Bit
{
	
	////////////////////////////////////////////////////////////////
	/// \ingroup Audio
	/// \brief Audio buffer class.
	///
	/// This class loads audio files into a buffer.
	/// 
	////////////////////////////////////////////////////////////////
	class BIT_API AudioBuffer
	{

	public:

		/////////////////////////////////////////////////////////////////
		/// \brief Default constructor
		/// 
		////////////////////////////////////////////////////////////////
		AudioBuffer( );

		/////////////////////////////////////////////////////////////////
		/// \brief Destructor
		/// 
		////////////////////////////////////////////////////////////////
		~AudioBuffer( );

		/////////////////////////////////////////////////////////////////
		/// \brief Load buffer from file.
		///
		/// This function will figure out what file format to load,
		/// depending on the file extension.
		///
		/// \param p_Filename Path to the file.
		/// 
		////////////////////////////////////////////////////////////////
		Bool LoadFromFile( const std::string & p_Filename );

		/////////////////////////////////////////////////////////////////
		/// \brief Load buffer from WAV file.
		///
		/// \param p_Filename Path to the file.
		/// 
		////////////////////////////////////////////////////////////////
		Bool LoadFromWavFile( const std::string & p_Filename );

		/////////////////////////////////////////////////////////////////
		/// \brief Get the raw data.
		/// 
		////////////////////////////////////////////////////////////////
		Uint8 * GetData( ) const;

		/////////////////////////////////////////////////////////////////
		/// \brief Get the size of the raw data.
		/// 
		////////////////////////////////////////////////////////////////
		SizeType GetDataSize( ) const;

		/////////////////////////////////////////////////////////////////
		/// \brief Get the channel count.
		/// 
		////////////////////////////////////////////////////////////////
		SizeType GetChannelCount( ) const;

		/////////////////////////////////////////////////////////////////
		/// \brief Get the sample rate.
		/// 
		////////////////////////////////////////////////////////////////
		SizeType GetSampleRate( ) const;

		/////////////////////////////////////////////////////////////////
		/// \brief Get the bits per sample count.
		/// 
		////////////////////////////////////////////////////////////////
		SizeType GetBitsPerSample( ) const;

	private:

		Uint8 * m_pData;
		SizeType m_DataSize;
		SizeType m_ChannelCount;
		SizeType m_SampleRate;
		SizeType m_BitsPerSample;

	};

}

#endif
