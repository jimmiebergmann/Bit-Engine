// ///////////////////////////////////////////////////////////////////////////
// Copyright (C) 2013 Jimmie Bergmann - jimmiebergmann@gmail.com
// 
// This software is provided 'as-is', without any express or
// implied warranty. In no event will the authors be held
// liable for any damages arising from the use of this software.
// 
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute
// it freely, subject to the following restrictions:
// 
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but
//    is not required.
// 
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
// 
// 3. This notice may not be removed or altered from any
//    source distribution.
// ///////////////////////////////////////////////////////////////////////////

#ifndef BIT_NETWORK_ADDRESS_HPP
#define BIT_NETWORK_ADDRESS_HPP

#include <Bit/Build.hpp>
#include <string>

namespace Bit
{
	namespace Net
	{

		////////////////////////////////////////////////////////////////
		/// \ingroup Network
		/// \brief Network address class.
		///
		////////////////////////////////////////////////////////////////
		class BIT_API Address
		{
		public:

			////////////////////////////////////////////////////////////////
			/// \brief Default constructor
			///
			////////////////////////////////////////////////////////////////
			Address( );

			////////////////////////////////////////////////////////////////
			/// \brief Constructor
			/// 
			/// \param p_A First field of the address.
			/// \param p_B Second field of the address.
			/// \param p_C Third field of the address.
			/// \param p_D Thourth field of the address.
			/// \param p_Port The port.
			///
			////////////////////////////////////////////////////////////////
			Address(	const Uint8 p_A, const Uint8 p_B, const Uint8 p_C,
						const Uint8 p_D, const Uint16 p_Port );

			////////////////////////////////////////////////////////////////
			/// \brief Constructor
			/// 
			/// \param p_Address The address.
			/// \param p_Port The port.
			///
			////////////////////////////////////////////////////////////////
			Address( const Uint32 p_Address, Uint16 p_Port );

			////////////////////////////////////////////////////////////////
			/// \brief Constructor, initialize from a string.
			/// 
			/// \param p_String The input string.
			///
			/// \see SetAddressFromString
			///
			////////////////////////////////////////////////////////////////
			Address( const std::string & p_String );

			////////////////////////////////////////////////////////////////
			/// \brief Initialize the address from a string
			///
			/// For example: "127.0.0.1:1234"
			/// 
			/// \param p_String The input string.
			///
			////////////////////////////////////////////////////////////////
			Bool SetAddressFromString( const std::string & p_String );

			////////////////////////////////////////////////////////////////
			/// \brief Get the address.
			///
			////////////////////////////////////////////////////////////////
			Uint32 GetAddress( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get the first field of the address.
			///
			////////////////////////////////////////////////////////////////
			Uint8 GetA( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get the second field of the address.
			///
			////////////////////////////////////////////////////////////////
			Uint8 GetB( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get the third field of the address.
			///
			////////////////////////////////////////////////////////////////
			Uint8 GetC( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get the thourth field of the address.
			///
			////////////////////////////////////////////////////////////////
			Uint8 GetD( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get the port
			///
			////////////////////////////////////////////////////////////////
			Uint16 GetPort( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get the address index.
			///
			/// \return Unique index of the address and port.
			///
			////////////////////////////////////////////////////////////////
			Uint64 GetAddressIndex( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get the first field of the address.
			///
			////////////////////////////////////////////////////////////////
			void SetPort( const Uint16 p_Port );
			/*void SetA( BIT_UINT8 p_A );
			void SetB( BIT_UINT8 p_B );
			void SetC( BIT_UINT8 p_C );
			void SetD( BIT_UINT8 p_D );*/

			////////////////////////////////////////////////////////////////
			/// \brief Equal to operator.
			///
			/// Compares two addresses.
			///
			////////////////////////////////////////////////////////////////
			Bool operator == ( const Address & p_Address ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Not equal to operator.
			///
			/// Compares two addresses.
			///
			////////////////////////////////////////////////////////////////
			Bool operator != ( const Address & p_Address ) const;

		private:

			// Private variables
			Uint32 m_Address;	///< The address.
			Uint16 m_Port;		///< The port.

		};
	}

}

#endif