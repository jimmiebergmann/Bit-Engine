// Copyright (C) 2013 Jimmie Bergmann - jimmiebergmann@gmail.com
// 
// This software is provided 'as-is', without any express or
// implied warranty. In no event will the authors be held
// liable for any damages arising from the use of this software.
// 
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute
// it freely, subject to the following restrictions:
// 
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but
//    is not required.
// 
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
// 
// 3. This notice may not be removed or altered from any
//    source distribution.
// ///////////////////////////////////////////////////////////////////////////

#ifndef BIT_NETWORK_TORRENT_HPP
#define BIT_NETWORK_TORRENT_HPP

#include <Bit/Build.hpp>
#include <Bit/System/Hash.hpp>
#include <Bit/Network/Url.hpp>
#include <Bit/Network/Http.hpp>
#include <vector>

namespace Bit
{

	////////////////////////////////////////////////////////////////
	/// \ingroup Network
	/// \brief Torrent protocol class.
	///
	/// Resources:	https://wiki.theory.org/BitTorrentSpecification
	///				http://en.wikipedia.org/wiki/Torrent_file
	///
	////////////////////////////////////////////////////////////////
	class BIT_API Torrent
	{

	public:


		////////////////////////////////////////////////////////////////
		/// \brief Peer class.
		///
		////////////////////////////////////////////////////////////////
		class Peer
		{

		public:

			// Friend classes
			friend class Tracker;

			////////////////////////////////////////////////////////////////
			/// \brief Default constructor
			///
			////////////////////////////////////////////////////////////////
			Peer( );

			////////////////////////////////////////////////////////////////
			/// \brief Constructor
			///
			////////////////////////////////////////////////////////////////
			Peer( const Address p_Address, const Uint16 p_Port );

		private:

			Address m_Address;	///< The peers address.
			Uint16 m_Port;		///< The port that the peer is listening on.

		};

		////////////////////////////////////////////////////////////////
		/// \brief Tracker class.
		///
		////////////////////////////////////////////////////////////////
		class Tracker
		{

		public:

			////////////////////////////////////////////////////////////////
			/// \brief Tracker response class.
			///
			////////////////////////////////////////////////////////////////
			class Response
			{

				public:

					// Friend classes
					friend class Tracker;

					// Public typedefs
					typedef std::vector<Peer> PeerVector;

					////////////////////////////////////////////////////////////////
					/// \brief 
					///
					////////////////////////////////////////////////////////////////
					const std::string & GetFailureReason( ) const;

					////////////////////////////////////////////////////////////////
					/// \brief 
					///
					////////////////////////////////////////////////////////////////
					const std::string & GetWarningMessage( ) const;

					////////////////////////////////////////////////////////////////
					/// \brief 
					///
					////////////////////////////////////////////////////////////////
					Uint32 GetInterval( ) const;

					////////////////////////////////////////////////////////////////
					/// \brief 
					///
					////////////////////////////////////////////////////////////////
					const std::string & GeTrackerId( ) const;

					////////////////////////////////////////////////////////////////
					/// \brief 
					///
					////////////////////////////////////////////////////////////////
					Uint32 GetCompleteCount( ) const;

					////////////////////////////////////////////////////////////////
					/// \brief 
					///
					////////////////////////////////////////////////////////////////
					Uint32 GetIncompleteCount( ) const;

					////////////////////////////////////////////////////////////////
					/// \brief 
					///
					////////////////////////////////////////////////////////////////
					SizeType GetPeerCount( ) const;

					////////////////////////////////////////////////////////////////
					/// \brief 
					///
					////////////////////////////////////////////////////////////////
					Peer & GetPeer( const SizeType p_Index );

					////////////////////////////////////////////////////////////////
					/// \brief 
					///
					////////////////////////////////////////////////////////////////
					const PeerVector & GetPeers( ) const;

			private:

					// Private varaibles
					std::string m_FailureReason;	///< Reason why the request failed.
					std::string m_WarningMessage;	///< Warning message from the tracker.
					Uint32 m_Interval;				///< Interval in seconds that the client should wait unit sending next request.
					std::string m_TrackerId;		///< Tracker id, might be absent.
					Uint32 m_Complete;				///< Number of clients with the entire file(seeders).
					Uint32 m_Incomplete;			///< Number of non-seeder peers(leechers).
					PeerVector m_Peers;				///< Vector of all the available peers.

			};

			////////////////////////////////////////////////////////////////
			/// \brief Default constructor
			///
			/// \param p_PeerRequestCount The ammount of peers the client
			///		want from the tracker
			///
			////////////////////////////////////////////////////////////////
			Tracker( const Uint16 p_PeerRequestCount = 200 );

			////////////////////////////////////////////////////////////////
			/// \brief Constructor
			///
			////////////////////////////////////////////////////////////////
			Tracker( const Url & p_Url );

			////////////////////////////////////////////////////////////////
			/// \brief Set the tracker's URL
			///
			////////////////////////////////////////////////////////////////
			void SetUrl( const Url & p_Url );

			////////////////////////////////////////////////////////////////
			/// \brief Get the tracker's URL
			///
			////////////////////////////////////////////////////////////////
			const Url & GetUrl( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Send request(announce)
			///
			/// \param p_Response The response from the tracker
			/// \param p_Torrent The torrent that you want information about.
			///
			////////////////////////////////////////////////////////////////
			Bool SendRequest( Response & p_Response, const Torrent & p_Torrent, const Time & p_Timeout = Seconds( 10 ) );

		private:

			// Private functions
			////////////////////////////////////////////////////////////////
			/// \brief Parse the peer string part of the response from the tracker.
			///
			/// \param p_PeerString The string of all the peers.
			/// \param p_Peers The output vector for the parsed peers.
			///
			////////////////////////////////////////////////////////////////
			Bool ParsePeers( const std::string & p_PeerString, Response::PeerVector & p_Peers );

			// Private varaibles
			Url m_Url;						///< The tracker's url.
			Uint16 m_PeerRequestCount;		///< The ammount of peers the client want from the tracker.

		};

		////////////////////////////////////////////////////////////////
		/// \brief Default constructor
		///
		////////////////////////////////////////////////////////////////
		Torrent( const Uint16 p_Port = 6881 );

		////////////////////////////////////////////////////////////////
		/// \brief Read a torrent file and store it's data.
		///
		/// \param p_Filename Name of the torrent file.
		///
		////////////////////////////////////////////////////////////////
		Bool ReadTorrentFile( const std::string & p_Filename );

		////////////////////////////////////////////////////////////////
		/// \brief Sets the listening port.
		///
		////////////////////////////////////////////////////////////////
		void SetPort( const Uint16 p_Port );

		////////////////////////////////////////////////////////////////
		/// \brief Gets the listening port.
		///
		////////////////////////////////////////////////////////////////
		Uint16 GetPort( ) const;

		////////////////////////////////////////////////////////////////
		/// \brief Gets the info hash
		///
		////////////////////////////////////////////////////////////////
		const Hash & GetPeerId( ) const;

		////////////////////////////////////////////////////////////////
		/// \brief Gets the info hash
		///
		////////////////////////////////////////////////////////////////
		const Hash & GetInfoHash( ) const;

		////////////////////////////////////////////////////////////////
		/// \brief Get the numbers of trackers
		///
		////////////////////////////////////////////////////////////////
		SizeType GetTrackerCount( ) const;

		////////////////////////////////////////////////////////////////
		/// \brief Get a tracker
		///
		////////////////////////////////////////////////////////////////
		Tracker & GetTracker( const SizeType p_Index );

	private:

		// Private typedefs
		typedef std::vector<Tracker>			TrackerVector;	///< Tracker vector.
		typedef std::vector<Hash>				HashVector;		///< Hash vector, used for pieces.
		typedef std::pair<std::string, Uint32>	FilePair;		///< Name and file size
		typedef std::vector<FilePair>			FileVector;		///< Vector of files(name and size)

		// Private variables
		Uint16 m_Port;				///< Listening port.
		Hash m_PeerId;				///< The peer ID. It should be unique for the local machine.
		TrackerVector m_Trackers;	///< Vector of all available trackers.
		Uint32 m_PieceSize;			///< Size of each piece;
		HashVector m_Pieces;		///< All the pieces.
		Hash m_InfoHash;			///< The info hash.
		FileVector m_Files;			///< The files in this torrent.

	};

}

#endif