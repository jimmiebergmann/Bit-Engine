// ///////////////////////////////////////////////////////////////////////////
// Copyright (C) 2013 Jimmie Bergmann - jimmiebergmann@gmail.com
//
// This software is provided 'as-is', without any express or
// implied warranty. In no event will the authors be held
// liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute
// it freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but
//    is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any
//    source distribution.
// ///////////////////////////////////////////////////////////////////////////

#ifndef BIT_SYSTEM_NTP_TIME_HPP
#define BIT_SYSTEM_NTP_TIME_HPP

#include <Bit/Build.hpp>
#include <string>

namespace Bit
{

	////////////////////////////////////////////////////////////////
	/// \ingroup System
	/// \brief NTP time timestamp
	/// 
	////////////////////////////////////////////////////////////////
	class BIT_API NtpTimestamp
	{

	public:

		////////////////////////////////////////////////////////////////
		/// \brief Default constructor.
		/// 
		////////////////////////////////////////////////////////////////
		NtpTimestamp( );

		////////////////////////////////////////////////////////////////
		/// \brief Constructor.
		///
		/// Takes a 64 bit ntp timestamp as paramter.
		///
		/// \param 64 bit ntp timestamp.
		/// 
		////////////////////////////////////////////////////////////////
		NtpTimestamp( const Bit::Uint64 p_Timestamp );

		////////////////////////////////////////////////////////////////
		/// \brief Sets the full timestamp.
		/// 
		////////////////////////////////////////////////////////////////
		void SetTimestamp( const Uint64 p_Timestamp );

		////////////////////////////////////////////////////////////////
		/// \brief Sets the timestamp seconds since 1900.
		/// 
		////////////////////////////////////////////////////////////////
		void SetSeconds( const Uint32 p_Seconds );

		////////////////////////////////////////////////////////////////
		/// \brief Sets the timestamp fractions.
		/// 
		////////////////////////////////////////////////////////////////
		void SetFractions( const Uint32 p_Fractions );

		////////////////////////////////////////////////////////////////
		/// \brief Gets the full timestamp.
		/// 
		////////////////////////////////////////////////////////////////
		Uint64 GetTimestamp( ) const;

		////////////////////////////////////////////////////////////////
		/// \brief Gets the timestamp seconds since 1900.
		/// 
		////////////////////////////////////////////////////////////////
		Uint32 GetSeconds( ) const;

		////////////////////////////////////////////////////////////////
		/// \brief Gets the timestamp fractions.
		/// 
		////////////////////////////////////////////////////////////////
		Uint32 GetFractions( ) const;

		////////////////////////////////////////////////////////////////
		/// \brief Return a string in the same format as asctime.
		/// 
		////////////////////////////////////////////////////////////////
		std::string GetTimeString( ) const;

		////////////////////////////////////////////////////////////////
		/// \brief Return a string in the same format as asctime in local time.
		/// 
		////////////////////////////////////////////////////////////////
		std::string GetLocalTimeString( ) const;

	private:

		// Private variables
		Uint64 m_Timestamp; ///< 64 bit timestamp

	};

}

#endif