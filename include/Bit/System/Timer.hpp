// ///////////////////////////////////////////////////////////////////////////
// Copyright (C) 2013 Jimmie Bergmann - jimmiebergmann@gmail.com
//
// This software is provided 'as-is', without any express or
// implied warranty. In no event will the authors be held
// liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute
// it freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but
//    is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any
//    source distribution.
// ///////////////////////////////////////////////////////////////////////////

#ifndef BIT_SYSTEM_TIMER_HPP
#define BIT_SYSTEM_TIMER_HPP

#include <Bit/Build.hpp>

namespace Bit
{

	////////////////////////////////////////////////////////////////
	/// \ingroup System
	/// \brief Timer class
	///
	////////////////////////////////////////////////////////////////
	class BIT_API Timer
	{

	public:

		////////////////////////////////////////////////////////////////
		/// \brief Default constructor.
		///
		////////////////////////////////////////////////////////////////
		Timer( );

		////////////////////////////////////////////////////////////////
		/// \brief Starting the timer.
		///
		////////////////////////////////////////////////////////////////
		void Start( );

		////////////////////////////////////////////////////////////////
		/// \brief Stopping the timer.
		///
		////////////////////////////////////////////////////////////////
		void Stop( );

		////////////////////////////////////////////////////////////////
		/// \brief Getting the time.
		///
		/// \return The current time of the timer.
		///
		////////////////////////////////////////////////////////////////
		Float64 GetTime( );

		////////////////////////////////////////////////////////////////
		/// \brief Stopping and getting the time.
		///
		/// \return The current time of the timer.
		///
		/// \see Stop
		/// \see GetTime
		///
		////////////////////////////////////////////////////////////////
		Float64 GetLapsedTime( );

		////////////////////////////////////////////////////////////////
		/// \return The system time size last startup.
		///
		////////////////////////////////////////////////////////////////
		static Float64 GetSystemTime( );

	private:

		////////////////////////////////////////////////////////////////
		// Private variable members
		////////////////////////////////////////////////////////////////
		Float64 m_StartTime;	///< The start time
		Float64 m_Time;			///< The the current time.

	};
}


#endif