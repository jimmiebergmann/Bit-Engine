// Copyright (C) 2013 Jimmie Bergmann - jimmiebergmann@gmail.com
// 
// This software is provided 'as-is', without any express or
// implied warranty. In no event will the authors be held
// liable for any damages arising from the use of this software.
// 
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute
// it freely, subject to the following restrictions:
// 
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but
//    is not required.
// 
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
// 
// 3. This notice may not be removed or altered from any
//    source distribution.
// ///////////////////////////////////////////////////////////////////////////

#ifndef BIT_SYSTEM_JSON_VALUE_HPP
#define BIT_SYSTEM_JSON_VALUE_HPP

#include <Bit/Build.hpp>
#include <unordered_map>
#include <vector>
#include <string>

namespace Bit
{

	////////////////////////////////////////////////////////////////
	/// \ingroup System
	/// \brief Json(pronounced "Jason") namespace
	///
	////////////////////////////////////////////////////////////////
	namespace Json
	{

		////////////////////////////////////////////////////////////////
		/// \ingroup Bencode
		/// \brief Json value class
		///
		////////////////////////////////////////////////////////////////
		class BIT_API Value
		{

		public:

			// Friend classes
			friend class Reader;
			friend class Writer;
			friend class StyledWriter;

			////////////////////////////////////////////////////////////////
			/// \brief Json data type enumerator
			///
			////////////////////////////////////////////////////////////////
			enum eType
			{
				Null,		///< NULL type / invalid type.
				String,		///< String type.
				Number,		///< Double -precision floating -point typ.
				Object,		///< Object type.
				Array,		///< Array type.
				Boolean		///< Boolean type.
			};

			////////////////////////////////////////////////////////////////
			/// \brief Default constructor
			///
			////////////////////////////////////////////////////////////////
			Value( );

			////////////////////////////////////////////////////////////////
			/// \brief Constructor
			///
			////////////////////////////////////////////////////////////////
			Value( eType p_Type );

			////////////////////////////////////////////////////////////////
			/// \brief Copy constructor
			///
			////////////////////////////////////////////////////////////////
			Value( const Value & p_Value );

			////////////////////////////////////////////////////////////////
			/// \brief Destructor
			///
			////////////////////////////////////////////////////////////////
			~Value( );

			////////////////////////////////////////////////////////////////
			/// \brief Cleart the value from any data.
			///
			////////////////////////////////////////////////////////////////
			void Clear( );

			////////////////////////////////////////////////////////////////
			/// \brief Gets the type
			///
			////////////////////////////////////////////////////////////////
			eType GetType( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Checks if the value is a nil value.
			///
			////////////////////////////////////////////////////////////////
			Bool IsNull( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get value as string
			///
			////////////////////////////////////////////////////////////////
			const std::string &  AsString( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get value as number
			///
			////////////////////////////////////////////////////////////////
			Float64 AsNumber( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get value from object.
			///
			/// This function will add a null value to the dictionary
			/// with the p_key paramter as it's key value
			/// if the value can't be found in the object.
			///
			/// \return NullValue if failed, else the value from the given key.
			///
			////////////////////////////////////////////////////////////////
			Value & operator [ ] ( const std::string & p_Key );

			////////////////////////////////////////////////////////////////
			/// \brief Assign the value antother value
			///
			/// This will internally make a copy of the input value
			/// and all it's content.
			/// This can cause assignments of root values to be slow.
			///
			////////////////////////////////////////////////////////////////
			Value & operator = ( const Value & p_Value );

			////////////////////////////////////////////////////////////////
			/// \brief Assign the value a number.
			///
			////////////////////////////////////////////////////////////////
			Value & operator = ( const Float64 & p_Number );

			////////////////////////////////////////////////////////////////
			/// \brief Assign the value a string
			///
			////////////////////////////////////////////////////////////////
			Value & operator = ( const std::string & p_String );

			////////////////////////////////////////////////////////////////
			/// \brief Assign the value a boolean
			///
			////////////////////////////////////////////////////////////////
			Value & operator = ( const Bool & p_Boolean );

			////////////////////////////////////////////////////////////////
			/// \brief Compares value types, not the data.
			///
			////////////////////////////////////////////////////////////////
			bool operator == ( const Value & p_Value ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Compares value types, not the data.
			///
			////////////////////////////////////////////////////////////////
			bool operator != ( const Value & p_Value ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Static default null value.
			///	
			/// This value should be used as an error value.
			///
			////////////////////////////////////////////////////////////////
			static const Value NullValue;

		private:

			// Private typedefs
			typedef std::vector<Value *> ValueVector;
			typedef std::unordered_map<std::string, Value *> ValueMap;

			// Private unions
			union ValueHolder
			{
				std::string * String;
				Float64 Number;
				Bool Boolean;
				ValueVector * Array;
				ValueMap * Object;

			};

			////////////////////////////////////////////////////////////////
			/// \brief Static default value
			///	
			/// This value is being return by the Get function if
			/// the requested value can't be found.
			/// This value should just be temporary used and instantly copied
			/// after receiving it from the Get function.
			///
			/// \see Get
			///
			////////////////////////////////////////////////////////////////
			static Value s_DefaultValue;

			////////////////////////////////////////////////////////////////
			/// \brief Copy a value to another
			///
			/// This function will internally copy every single value in
			/// for example an array or object.
			///
			/// \param p_From Source value.
			/// \param p_To Destination value.
			///
			////////////////////////////////////////////////////////////////
			void CopyValue( const Value & p_From, Value & p_To ) const;

			// Private varaibles
			eType m_Type;
			ValueHolder m_Value;
			
		};

	}

}

#endif