// implied warranty. In no event will the authors be held
// liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute
// it freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but
//    is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any
//    source distribution.
// ///////////////////////////////////////////////////////////////////////////

#ifndef BIT_GRAPHICS_BMP_FILE_HPP
#define BIT_GRAPHICS_BMP_FILE_HPP

#include <Bit/Build.hpp>
#include <string>

namespace Bit
{

	////////////////////////////////////////////////////////////////
	/// \ingroup Graphics
	/// \brief Tga bitmap image file class.
	///
	/// The image data is stored with 8, 16, 24, or 32 bits per pixel.
	/// Currently not supporting RLE compression.
	///
	////////////////////////////////////////////////////////////////
	class BIT_API BmpFile
	{

	public:

		////////////////////////////////////////////////////////////////
		/// \brief Compression method enumerator.
		///
		////////////////////////////////////////////////////////////////
		enum eCompressionMethod
		{
			NoCompression = 0,
			Rle8 = 1,
			Rle4 = 2,
			Bitfields = 3,
			Jpeg = 4,
			Png = 5,
			AlpgaBitfields = 6,
			Cmyk = 11,
			CmykRle8 = 12,
			CmykRle4 = 13
		};

		////////////////////////////////////////////////////////////////
		/// \brief Bitmap header class.
		///
		////////////////////////////////////////////////////////////////
		class BitmapHeader
		{

		public:

			// Friend class.
			friend class BmpFile;

			////////////////////////////////////////////////////////////////
			/// \brief Default constructor.
			///
			////////////////////////////////////////////////////////////////
			BitmapHeader( );

			////////////////////////////////////////////////////////////////
			/// \brief Set the header identifier.
			///
			/// \return Pointer to 2 bytes.
			///
			////////////////////////////////////////////////////////////////
			void SetIdentifier( const Uint16 p_Identifier );

			////////////////////////////////////////////////////////////////
			/// \brief Set the file size.
			///
			////////////////////////////////////////////////////////////////
			void SetFileSize( const Uint32 p_FileSize );

			////////////////////////////////////////////////////////////////
			/// \brief Set the reserved space.
			///
			////////////////////////////////////////////////////////////////
			void SetReservedSpace( Uint32 p_Reserved );

			////////////////////////////////////////////////////////////////
			/// \brief Set the reserved space.
			///
			////////////////////////////////////////////////////////////////
			void SetPixelArrayOffset( const Uint32 p_Offset );

			////////////////////////////////////////////////////////////////
			/// \brief Get the header identifier.
			///
			////////////////////////////////////////////////////////////////
			Uint16 GetIdentifier( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get the file size.
			///
			////////////////////////////////////////////////////////////////
			Uint32 GetFileSize( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get the reserved space.
			///
			////////////////////////////////////////////////////////////////
			Uint32 GetReservedSpace( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get the reserved space.
			///
			////////////////////////////////////////////////////////////////
			Uint32 GetPixelArrayOffset( ) const;

		private:

			Uint16 m_Identifier;		///< Contains "BM"/ 0x424D
			Uint32 m_FileSize;			///< BMP file size in bytes.
			Uint32 m_Reserved;			///< Reserved values.
			Uint32 m_PixelArrayOffset;	///< Offset to the pixel array, in bytes.

		};

		////////////////////////////////////////////////////////////////
		/// \brief DIB(bitmap information) header class.
		///
		////////////////////////////////////////////////////////////////
		class DibHeader
		{

		public:

			// Friend class.
			friend class BmpFile;

			////////////////////////////////////////////////////////////////
			/// \brief Default constructor.
			///
			////////////////////////////////////////////////////////////////
			DibHeader( );

			////////////////////////////////////////////////////////////////
			/// \brief Set header size.
			///
			////////////////////////////////////////////////////////////////
			void SetHeaderSize( const Uint32 p_HeaderSize );

			////////////////////////////////////////////////////////////////
			/// \brief Set bitmap width in pixels(signed integer)
			///
			////////////////////////////////////////////////////////////////
			void SetBitmapWidth( const Int32 p_Width );

			////////////////////////////////////////////////////////////////
			/// \brief Set bitmap height in pixels(signed integer)
			///
			////////////////////////////////////////////////////////////////
			void SetBitmapHeight( const Int32 p_Height );

			////////////////////////////////////////////////////////////////
			/// \brief Set the number of color planes. Should be 1.
			///
			////////////////////////////////////////////////////////////////
			void SetColorPlaneCount( const Uint16 p_Count );

			////////////////////////////////////////////////////////////////
			/// \brief Set the number of bis per pixel( 1, 4, 8, 16, 24 and 32 ).
			///
			////////////////////////////////////////////////////////////////
			void SetPixelDepth( const Uint16 p_PixelDepth );

			////////////////////////////////////////////////////////////////
			/// \brief Set compression method.
			///
			////////////////////////////////////////////////////////////////
			void SetCompression( const Uint32 p_CompressionMethod );

			////////////////////////////////////////////////////////////////
			/// \brief Set compression method.
			///
			////////////////////////////////////////////////////////////////
			void SetCompression( const eCompressionMethod p_CompressionMethod );

			////////////////////////////////////////////////////////////////
			/// \brief Set the bitmap data size.
			///
			////////////////////////////////////////////////////////////////
			void SetBitmapDataSize( const Uint32 p_Size );

			////////////////////////////////////////////////////////////////
			/// \brief Set the horizontal resolution(pixels per meter).
			///
			////////////////////////////////////////////////////////////////
			void SetHorizontalResolution( const Int32 p_HorizontalResolution );

			////////////////////////////////////////////////////////////////
			/// \brief Set the vertical resolution(pixels per meter).
			///
			////////////////////////////////////////////////////////////////
			void SetVerticalResolution( const Int32 p_VerticalResolution );

			////////////////////////////////////////////////////////////////
			/// \brief Set the number of colors in the color palette.
			///
			////////////////////////////////////////////////////////////////
			void SetColorPaletteCount( const Uint32 p_Count );

			////////////////////////////////////////////////////////////////
			/// \brief Set the number of important colors used,
			///		0 when every color is important.
			///
			////////////////////////////////////////////////////////////////
			void SetImportantColorCount( const Uint32 p_Count );

			////////////////////////////////////////////////////////////////
			/// \brief Get header size.
			///
			////////////////////////////////////////////////////////////////
			Uint32 GetHeaderSize( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get bitmap width in pixels(signed integer)
			///
			////////////////////////////////////////////////////////////////
			Int32 GetBitmapWidth( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get bitmap height in pixels(signed integer)
			///
			////////////////////////////////////////////////////////////////
			Int32 GetBitmapHeight( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get the number of color planes. Should be 1.
			///
			////////////////////////////////////////////////////////////////
			Uint16 GetColorPlaneCount( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get the number of bis per pixel( 1, 4, 8, 16, 24 and 32 ).
			///
			////////////////////////////////////////////////////////////////
			Uint16 GetPixelDepth( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get compression method.
			///
			////////////////////////////////////////////////////////////////
			Uint32 GetCompression( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get the bitmap data size.
			///
			////////////////////////////////////////////////////////////////
			Uint32 GetBitmapDataSize( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get the horizontal resolution(pixels per meter).
			///
			////////////////////////////////////////////////////////////////
			Int32 GetHorizontalResolution( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get the vertical resolution(pixels per meter).
			///
			////////////////////////////////////////////////////////////////
			Int32 GetVerticalResolution( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get the number of colors in the color palette.
			///
			////////////////////////////////////////////////////////////////
			Uint32 GetColorPaletteCount( ) const;

			////////////////////////////////////////////////////////////////
			/// \brief Get the number of important colors used,
			///		0 when every color is important.
			///
			////////////////////////////////////////////////////////////////
			Uint32 GetImportantColorCount( ) const;

		private:

			Uint32 m_HeaderSize;
			Int32 m_BitmapWidth;
			Int32 m_BitmapHeight;
			Uint16 m_ColorPlanes;
			Uint16 m_PixelDepth;
			Uint32 m_Compression;
			Uint32 m_DataSize;
			Int32 m_HorizontalResolution;
			Int32 m_VerticalResolution;
			Uint32 m_ColorPalette;
			Uint32 m_ImportantColors;

		};

		////////////////////////////////////////////////////////////////
		/// \brief Constructor
		///
		/// \param p_DeallocateFlag Does not deallocate the bitmap data
		/// at destruction if false. This is useful if you want to
		/// take over the bitmap data pointer from the bmp file class.
		///
		////////////////////////////////////////////////////////////////
		BmpFile( const Bool p_DeallocateFlag = true );

		////////////////////////////////////////////////////////////////
		/// \brief Destructor.
		///
		/// Clears the data.
		///
		////////////////////////////////////////////////////////////////
		~BmpFile( );

		////////////////////////////////////////////////////////////////
		/// \brief Load BMP file from memory.
		///
		/// \param p_pMemory Pointer to the memory.
		///
		/// \return True if succeeded, else false.
		///
		////////////////////////////////////////////////////////////////
		Bool LoadFromMemory( const std::string & p_Memory );

		////////////////////////////////////////////////////////////////
		/// \brief Load BMP file from stream.
		///
		/// \return True if succeeded, else false.
		///
		////////////////////////////////////////////////////////////////
		Bool LoadFromStream( std::istream & p_Stream );

		////////////////////////////////////////////////////////////////
		/// \brief Load BMP file from file.
		///
		/// \return True if succeeded, else false.
		///
		////////////////////////////////////////////////////////////////
		Bool LoadFromFile( const std::string & p_Filename );

		////////////////////////////////////////////////////////////////
		/// \brief Save BMP to memory.
		///
		/// \param p_pMemory Reference to the memory.
		/// \param p_Validate, If true, makes sure to save a valid BMP file.
		///		Setting default values for invalid data in the BMP structures.
		///
		/// \return True if succeeded, else false.
		///
		////////////////////////////////////////////////////////////////
		Bool SaveToMemory( std::string & p_Memory, const Bool p_Validate = true );

		////////////////////////////////////////////////////////////////
		/// \brief Save BMP to stream.
		///
		/// \param p_Stream Output stream.
		/// \param p_Validate, If true, makes sure to save a valid BMP file.
		///		Setting default values for invalid data in the BMP structures.
		///
		/// \return True if succeeded, else false.
		///
		////////////////////////////////////////////////////////////////
		Bool SaveToStream( std::ostream & p_Stream, const Bool p_Validate = true );

		////////////////////////////////////////////////////////////////
		/// \brief Save BMP to file.
		///
		/// \param p_Filename Output file.
		/// \param p_Validate, If true, makes sure to save a valid BMP file.
		///		Setting default values for invalid data in the BMP structure.
		///
		/// \return True if succeeded, else false.
		///
		////////////////////////////////////////////////////////////////
		Bool SaveToFile( const std::string & p_Filename, const Bool p_Validate = true );

		////////////////////////////////////////////////////////////////
		/// \brief Clear the BMP header and data.
		///
		////////////////////////////////////////////////////////////////
		void Clear( );
		
		////////////////////////////////////////////////////////////////
		/// \brief Get the bitmap header field.
		///
		////////////////////////////////////////////////////////////////
		BitmapHeader & GetBitmapHeader( );

		////////////////////////////////////////////////////////////////
		/// \brief Get the DIB header field.
		///
		////////////////////////////////////////////////////////////////
		DibHeader & GetDibHeader( );

		////////////////////////////////////////////////////////////////
		/// \brief Get the raw bitmap data.
		///
		////////////////////////////////////////////////////////////////
		const Uint8 * GetData( ) const;
		
		////////////////////////////////////////////////////////////////
		/// \brief Get the raw bitmap data size in bytes.
		///
		////////////////////////////////////////////////////////////////
		SizeType GetDataSize( ) const;

		////////////////////////////////////////////////////////////////
		/// \brief Set the raw bitmap data.
		///
		/// Clears any previous data.
		/// The input data is copied into a new array.
		///
		////////////////////////////////////////////////////////////////
		void SetData( const Uint8 * p_pData, const SizeType p_DataSize  );

		////////////////////////////////////////////////////////////////
		/// \brief Get the deallocator flag.
		///
		////////////////////////////////////////////////////////////////
		Bool GetDeallocatorFlag( ) const;

	private:

		BitmapHeader m_BitmapHeader;	///< Bitmap header field.
		DibHeader m_DibHeader;			///< Dib(Bitmap information) header field.
		Uint8 * m_pData;				///< Raw pixel data.
		SizeType m_DataSize;			///< The data size in bytes.
		Bool m_DeallocateFlag;			///< Data deallocation at destruction flag, true by default.

	};

}

#endif