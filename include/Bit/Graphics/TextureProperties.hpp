// ///////////////////////////////////////////////////////////////////////////
// Copyright (C) 2013 Jimmie Bergmann - jimmiebergmann@gmail.com
//
// This software is provided 'as-is', without any express or
// implied warranty. In no event will the authors be held
// liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute
// it freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but
//    is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any
//    source distribution.
// ///////////////////////////////////////////////////////////////////////////

#ifndef BIT_GRAPHICS_TEXTURE_PROPERTIES_HPP
#define BIT_GRAPHICS_TEXTURE_PROPERTIES_HPP

#include <Bit/Build.hpp>
#include <Bit/NonCopyable.hpp>

namespace Bit
{

	////////////////////////////////////////////////////////////////
	/// \ingroup Graphics
	/// \brief Texture properties class.
	///
	/// Flag bits:
	/// - 0x01 Magnification filter.
	/// - 0x02 Minification filter.
	/// - 0x04 Wrapping X.
	/// - 0x08 Wrapping Y.
	/// - 0x10 Anisotrpical level.
	///
	////////////////////////////////////////////////////////////////
	class BIT_API TextureProperties : public NonCopyable
	{

	public:

		////////////////////////////////////////////////////////////////
		/// \brief Filter enumerator
		///
		/// Do not use mipmap filters for magnification.
		///
		////////////////////////////////////////////////////////////////
		enum eFilter
		{
			Nearest,				///< Nearest neighbor blending.
			NearestMipmapNearest,	///< Not linear within mip-level.
			NearestMipmapLinear,	///< Same as previous, but linear between mip-levels.
			Linear,					///< Linear blend between texels.
			LinearMipmapNearest,	///< Linear within mip-level.
			LinearMipmapLinear		///< Same as previous, but linear between mip-levels.
		};

		////////////////////////////////////////////////////////////////
		/// \brief Wrapping enumerator
		///
		////////////////////////////////////////////////////////////////
		enum eWarpping
		{
			Repeat,
			Clamp
		};

		////////////////////////////////////////////////////////////////
		/// \brief Default constructor.
		///
		////////////////////////////////////////////////////////////////
		TextureProperties( );

		////////////////////////////////////////////////////////////////
		/// \brief Set magnification filter
		///
		////////////////////////////////////////////////////////////////
		void SetMagnificationFilter( const eFilter p_Filter );

		////////////////////////////////////////////////////////////////
		/// \brief Set minification filter
		///
		////////////////////////////////////////////////////////////////
		void SetMinificationFilter( const eFilter p_Filter );

		////////////////////////////////////////////////////////////////
		/// \brief Set wrapping for
		///
		////////////////////////////////////////////////////////////////
		void SetWrapping( const eWarpping p_WrapX, const eWarpping p_WrapY );

		////////////////////////////////////////////////////////////////
		/// \brief Set wrapping for X axis.
		///
		////////////////////////////////////////////////////////////////
		void SetWrappingX( const eWarpping p_WrapX );

		////////////////////////////////////////////////////////////////
		/// \brief Set wrapping for Y axis.
		///
		////////////////////////////////////////////////////////////////
		void SetWrappingY( const eWarpping p_WrapY );

		////////////////////////////////////////////////////////////////
		/// \brief Set mipmapping status.
		///
		////////////////////////////////////////////////////////////////
		void SetMipmapping( Bool p_Status );

		////////////////////////////////////////////////////////////////
		/// \brief Set anisotropic level.
		///
		////////////////////////////////////////////////////////////////
		void SetAnisotropic( const Uint32 p_Level );

		////////////////////////////////////////////////////////////////
		/// \brief Set update flags. For advanced users only.
		///
		////////////////////////////////////////////////////////////////
		void SetFlags( const Uint8 p_Flags );

		////////////////////////////////////////////////////////////////
		/// \brief Get magnification filter
		///
		////////////////////////////////////////////////////////////////
		eFilter GetMagnificationFilter( ) const;

		////////////////////////////////////////////////////////////////
		/// \brief Get minification filter
		///
		////////////////////////////////////////////////////////////////
		eFilter GetMinificationFilter( ) const;

		////////////////////////////////////////////////////////////////
		/// \brief Get wrapping for X axis.
		///
		////////////////////////////////////////////////////////////////
		eWarpping GetWrappingX( ) const;

		////////////////////////////////////////////////////////////////
		/// \brief Get wrapping for Y axis.
		///
		////////////////////////////////////////////////////////////////
		eWarpping GetWrappingY( ) const;

		////////////////////////////////////////////////////////////////
		/// \brief Get mipmapping status.
		///
		////////////////////////////////////////////////////////////////
		Bool GetMipmapping( ) const;

		////////////////////////////////////////////////////////////////
		/// \brief Get anisotropic level.
		///
		////////////////////////////////////////////////////////////////
		Uint32 GetAnisotropic( ) const;

		////////////////////////////////////////////////////////////////
		/// \brief Get update flags. For advanced users only.
		///
		////////////////////////////////////////////////////////////////
		Uint8 GetFlags( ) const;

	private:

		eFilter m_MagnificationFilter;	
		eFilter m_MinificationFilter;
		eWarpping m_WrappingX;
		eWarpping m_WrappingY;
		Bool m_Mipmapping;
		Uint32 m_AnisotropicLevel;
		Uint8 m_Flags;					///< Update flag.
									
	};

}

#endif