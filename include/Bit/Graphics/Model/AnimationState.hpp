// ///////////////////////////////////////////////////////////////////////////
// Copyright (C) 2013 Jimmie Bergmann - jimmiebergmann@gmail.com
//
// This software is provided 'as-is', without any express or
// implied warranty. In no event will the authors be held
// liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute
// it freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but
//    is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any
//    source distribution.
// ///////////////////////////////////////////////////////////////////////////

#ifndef BIT_GRAPHICS_MODEL_ANIMATION_STATE_HPP
#define BIT_GRAPHICS_MODEL_ANIMATION_STATE_HPP

#include <Bit/Build.hpp>
#include <Bit/Graphics/Model/Animation.hpp>
#include <Bit/System/Timer.hpp>

namespace Bit
{

	// Forward declarations.
	class Model;

	////////////////////////////////////////////////////////////////
	/// \ingroup Graphics
	/// \brief Key frame base class for 3D models.
	///
	/// \see Skeleton
	///
	////////////////////////////////////////////////////////////////
	class BIT_API AnimationState
	{

	public:

		// Friend classes
		friend class Model;
		friend class Skeleton;

		////////////////////////////////////////////////////////////////
		/// \brief State enum.
		///
		////////////////////////////////////////////////////////////////
		enum eState
		{
			Playing,
			Stopped,
			Paused
		};

		////////////////////////////////////////////////////////////////
		/// \brief Constructor.
		///
		////////////////////////////////////////////////////////////////
		AnimationState(Model * p_pModel);

		////////////////////////////////////////////////////////////////
		/// \brief Play paused or stopped animation.
		///
		////////////////////////////////////////////////////////////////
		void Play();

		////////////////////////////////////////////////////////////////
		/// \brief Play animation.
		///
		////////////////////////////////////////////////////////////////
		void Play(const SizeType p_AnimationIndex, const Time & p_StartTime = Time::Zero);

		////////////////////////////////////////////////////////////////
		/// \brief Stop animation.
		///
		////////////////////////////////////////////////////////////////
		void Stop();

		////////////////////////////////////////////////////////////////
		/// \brief Pause animation.
		///
		////////////////////////////////////////////////////////////////
		void Pause();

		////////////////////////////////////////////////////////////////
		/// \brief Set looping.
		///
		////////////////////////////////////////////////////////////////
		void SetLooping(const Bool p_Looping);

		////////////////////////////////////////////////////////////////
		/// \brief Set interpolating. Linear if true.
		///
		////////////////////////////////////////////////////////////////
		void SetInterpolating(const Bool p_Interpolating);

		////////////////////////////////////////////////////////////////
		/// \brief Set animation speed.
		///
		////////////////////////////////////////////////////////////////
		void SetAnimationSpeed(const Float32 p_Speed);

		////////////////////////////////////////////////////////////////
		/// \brief Set current animation time.
		///
		////////////////////////////////////////////////////////////////
		void SetTime(const Time & p_Time);

		////////////////////////////////////////////////////////////////
		/// \brief Get looping.
		///
		////////////////////////////////////////////////////////////////
		Bool GetLooping() const;

		////////////////////////////////////////////////////////////////
		/// \brief Get interpolating. Linear if true.
		///
		////////////////////////////////////////////////////////////////
		Bool GetInterpolating() const;

		////////////////////////////////////////////////////////////////
		/// \brief Get current state.
		///
		////////////////////////////////////////////////////////////////
		eState GetState() const;

		////////////////////////////////////////////////////////////////
		/// \brief Get animation speed.
		///
		////////////////////////////////////////////////////////////////
		Float32 GetAnimationSpeed() const;

		////////////////////////////////////////////////////////////////
		/// \brief Get current state.
		///
		////////////////////////////////////////////////////////////////
		Time GetTime() const;

	private:

		// Private variables.
		Model *		m_pParent;			///< Parent class.
		Animation *	m_pAnimation;		///< Pointer to animation.
		SizeType	m_AnimationIndex;	///< Animation index.
		Bool		m_Looping;			///< If the animation should loop.
		Bool		m_Interpolating;	///< If the animation should be interpolated.
		eState		m_State;			///< Current state.
		Float32		m_AnimationSpeed;	///< Animation speed.
		Time		m_Time;				///< Current animation time.
		Timer		m_Timer;			///< Animation timer.

	};

}

#endif